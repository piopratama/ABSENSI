@model ABSENSI.ViewModel.UserViewModel

@{
    ViewBag.Title = "Home";
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var Calendar = FullCalendar.Calendar;
        var Draggable = FullCalendar.Draggable;

        var containerEl = document.getElementById('external-events');
        var calendarEl = document.getElementById('calendar');
        var checkbox = document.getElementById('drop-remove');

        //new Draggable(containerEl, {
        //    itemSelector: '.fc-event',
        //    eventData: function (eventEl) {
        //        return {
        //            id: eventEl.id,
        //            title: eventEl.innerText
        //        };
        //    }
        //});

        var calendar = new Calendar(calendarEl, {
            timeZone: 'local',
            dayMaxEventRows: 2,
            eventSources: [

                // your event source
                {
                    url: '@Url.Action("getEvent", "Home")'
                }

                // any other sources...

            ],
            eventClassNames: function (arg) {
                if (arg.event.extendedProps.attendance) {
                    return ['event_closed_pass']
                }
                else if(!arg.event.extendedProps.attendance && arg.event.extendedProps.is_past) {
                    return ['event_closed_loss']
                }
                else if(arg.event.extendedProps.attendance || arg.event.extendedProps.is_past) {
                    return ['event_closed']
                } else {
                    return ['event_normal']
                }
            },
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth, timeGridDay'
            },
            editable: true,
            eventClick: function (info) {
                var now = moment(new Date());
                var end = moment(info.event.start);
                var duration = moment.duration(now.diff(end));
                var hours = duration.asHours();
                if (hours <= 24) {
                    getLocation();
                    $(".eventTitleModal").html(moment(info.event.start).format('DD/MM/YYYY'));
                    $("#eventID").val(info.event.id);
                    $("#eventModal").modal("show");
                }
            }
        });

        calendar.render();
    });
</script>

<div class="container-fluid">
    <div class="row no-gutters">
        <div id='external-events' class="col-md-3 p-lg-3 pr-3">
            @*<button type="button" class="btn btn-info m-2" data-bs-toggle="modal" data-bs-target="#employeeModal"><i class="fa fa-plus"></i></button>*@

            @foreach (var u in Model.userList)
            {
                <div class='fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event m-2 ps-3'>
                    <p class='fc-event-main'>@u.fullname</p>
                </div>
            }
        </div>

        <div class="col-md-9">
            <div id='calendar'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("insertAttendance", "Home",
                                new { ReturnUrl = ViewBag.ReturnUrl },
                                FormMethod.Post, new { @class = "row needs-validation", @novalidate = "true" }))
{
    <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title eventTitleModal" id="exampleModalLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="input-group mb-3">
                        @Html.HiddenFor(model => model.userSchedule.user_schedule_id, new { @class = "form-control", @required = "required", @id = "eventID" })
                        @Html.HiddenFor(model => model.userSchedule.lat, new { @class = "form-control", @required = "required", @id = "lat" })
                        @Html.HiddenFor(model => model.userSchedule.lng, new { @class = "form-control", @required = "required", @id = "lng" })
                        <p>Do you want to absen on this schedule ?</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Yes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()

        var x = document.getElementById("demo");

        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        function showPosition(position) {
            //x.innerHTML = "Latitude: " + position.coords.latitude +
            //    "<br>Longitude: " + position.coords.longitude;
            $("#lat").val(position.coords.latitude);
            $("#lng").val(position.coords.longitude);
        }

        let message = '@TempData["message"]';
        if (message != "") {
            Swal.fire({
                icon: 'error',
                title: 'Attendace Failed',
                text: message
            })
        }
    </script>
}